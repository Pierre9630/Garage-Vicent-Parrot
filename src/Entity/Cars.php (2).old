<?php

namespace App\Entity;

use App\Repository\CarsRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;
use Vich\UploaderBundle\Mapping\Annotation as Vich;


#[ORM\Entity(repositoryClass: CarsRepository::class)]
#[Vich\Uploadable]
class Cars
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $Brand = null;

    #[ORM\Column(length: 255)]
    private ?string $Model = null;

    #[ORM\Column]
    private ?int $Year = null;

    #[ORM\Column]
    private ?int $Kilometers = null;

    #[ORM\Column(type: Types::TEXT, nullable: true)]
    private ?string $Description = null;

    #[ORM\Column(length: 255)]
    private ?string $TypeFuel = null;

    #[Vich\UploadableField(mapping: "cars", fileNameProperty: "image", mimeType: "image/jpeg")]
    #[ORM\OneToMany(mappedBy: 'cars', targetEntity: Images::class, orphanRemoval: true)]
    private ?Images $Image = null;

    public function __construct()
    {
        //$this->Image = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getBrand(): ?string
    {
        return $this->Brand;
    }

    public function setBrand(string $Brand): static
    {
        $this->Brand = $Brand;

        return $this;
    }

    public function getModel(): ?string
    {
        return $this->Model;
    }

    public function setModel(string $Model): static
    {
        $this->Model = $Model;

        return $this;
    }

    public function getYear(): ?int
    {
        return $this->Year;
    }

    public function setYear(int $Year): static
    {
        $this->Year = $Year;

        return $this;
    }

    public function getKilometers(): ?int
    {
        return $this->Kilometers;
    }

    public function setKilometers(int $Kilometers): static
    {
        $this->Kilometers = $Kilometers;

        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->Description;
    }

    public function setDescription(?string $Description): static
    {
        $this->Description = $Description;

        return $this;
    }

    public function getTypeFuel(): ?string
    {
        return $this->TypeFuel;
    }

    public function setTypeFuel(string $TypeFuel): static
    {
        $this->TypeFuel = $TypeFuel;

        return $this;
    }

    /**
     * @return Collection<int, Images>
     */
    public function getImage(): ?Images
    {
        return $this->Image;
    }

    public function addImage(Images $image): self
    {
        /*if (!$this->Image->getCars($image)) {
            $this->Image->addImage($image);
            $image->setCars($this);
        }*/
        $this->Images = $image;

        return $this;
    }

    public function removeImage(Images $image): static
    {
        if ($this->Image->removeElement($image)) {
            // set the owning side to null (unless already changed)
            if ($image->getCars() === $this) {
                $image->setCars(null);
            }
        }

        return $this;
    }
}
